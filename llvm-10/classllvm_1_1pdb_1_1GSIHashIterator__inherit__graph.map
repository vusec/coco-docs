<map id="llvm::pdb::GSIHashIterator" name="llvm::pdb::GSIHashIterator">
<area shape="rect" id="node2" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; GSIHashIterator,\l FixedStreamArrayIterator\l\&lt; PSHashRecord \&gt;, std::random\l_access_iterator_tag, const\l uint32_t \&gt;" alt="" coords="1819,297,2033,397"/>
<area shape="rect" id="node3" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; GSIHashIterator,\l std::random_access_iterator\l_tag, const uint32_t, typename\l std::iterator_traits\&lt; FixedStreamArray\lIterator\&lt; PSHashRecord \&gt; \&gt;::difference\l_type, typename std::conditional\&lt; std\l::is_same\&lt; const uint32_t, typename std\l::iterator_traits\&lt; FixedStreamArrayIterator\l\&lt; PSHashRecord \&gt; \&gt;::value_type \&gt;::value, typename\l std::iterator_traits\&lt; FixedStreamArrayIterator\l\&lt; PSHashRecord \&gt; \&gt;::pointer, const uint32_t * \&gt;\l::type, typename std::conditional\&lt; std::is_same\&lt;\l const uint32_t, typename std::iterator_traits\&lt; FixedStreamArrayIterator\l\&lt; PSHashRecord \&gt; \&gt;::value_type \&gt;::value, typename std::iterator\l_traits\&lt; FixedStreamArrayIterator\&lt; PSHashRecord \&gt; \&gt;::reference,\l const uint32_t &amp; \&gt;::type \&gt;" alt="" coords="1140,121,1577,382"/>
<area shape="rect" id="node5" href="$classllvm_1_1iterator__facade__base.html" title="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..." alt="" coords="359,384,583,455"/>
<area shape="rect" id="node7" href="$classllvm_1_1iterator__adaptor__base.html" title="CRTP base class for adapting an iterator to a different type. " alt="" coords="1232,407,1485,477"/>
</map>
