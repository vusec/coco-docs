<map id="llvm::StringMapKeyIterator&lt; ValueTy &gt;" name="llvm::StringMapKeyIterator&lt; ValueTy &gt;">
<area shape="rect" id="node2" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; StringMapKeyIterator\l\&lt; ValueTy \&gt;, StringMapConstIterator\l\&lt; ValueTy \&gt;, std::forward_iterator\l_tag, StringRef \&gt;" alt="" coords="1760,301,1997,387"/>
<area shape="rect" id="node3" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; StringMapKeyIterator\l\&lt; ValueTy \&gt;, std::forward\l_iterator_tag, StringRef,\l typename std::iterator_traits\l\&lt; StringMapConstIterator\&lt; ValueTy\l \&gt; \&gt;::difference_type, typename std\l::conditional\&lt; std::is_same\&lt; StringRef,\l typename std::iterator_traits\&lt; StringMapConstIterator\l\&lt; ValueTy \&gt; \&gt;::value_type \&gt;::value, typename std\l::iterator_traits\&lt; StringMapConstIterator\&lt; ValueTy\l \&gt; \&gt;::pointer, StringRef * \&gt;::type, typename std::conditional\l\&lt; std::is_same\&lt; StringRef, typename std::iterator_traits\l\&lt; StringMapConstIterator\&lt; ValueTy \&gt; \&gt;::value_type \&gt;::value,\l typename std::iterator_traits\&lt; StringMapConstIterator\&lt; ValueTy\l \&gt; \&gt;::reference, StringRef &amp; \&gt;::type \&gt;" alt="" coords="1100,129,1496,375"/>
<area shape="rect" id="node5" href="$classllvm_1_1iterator__facade__base.html" title="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..." alt="" coords="377,377,601,447"/>
<area shape="rect" id="node7" href="$classllvm_1_1iterator__adaptor__base.html" title="CRTP base class for adapting an iterator to a different type. " alt="" coords="1171,399,1425,470"/>
</map>
