<map id="llvm::ImmutableMap&lt; KeyT, ValT, ValInfo &gt;::iterator" name="llvm::ImmutableMap&lt; KeyT, ValT, ValInfo &gt;::iterator">
<area shape="rect" id="node2" href="$structllvm_1_1ImutAVLValueIterator.html" title="llvm::ImutAVLValueIterator\l\&lt; ImmutableMap \&gt;" alt="" coords="2505,503,2684,544"/>
<area shape="rect" id="node3" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; ImutAVLValueIterator\l\&lt; ImmutableMap \&gt;, ImmutableMap\l ::TreeTy::iterator, std::iterator\l_traits\&lt; ImmutableMap ::TreeTy::iterator\l \&gt;::iterator_category, const ImmutableMap\l ::value_type \&gt;" alt="" coords="1813,430,2083,545"/>
<area shape="rect" id="node4" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; ImutAVLValueIterator\l\&lt; ImmutableMap \&gt;, std::iterator\l_traits\&lt; ImmutableMap ::TreeTy\l::iterator \&gt;::iterator_category,\l const ImmutableMap ::value_type,\l typename std::iterator_traits\&lt; ImmutableMap\l ::TreeTy::iterator \&gt;::difference_type,\l typename std::conditional\&lt; std::is_same\l\&lt; const ImmutableMap ::value_type, typename\l std::iterator_traits\&lt; ImmutableMap ::TreeTy\l::iterator \&gt;::value_type \&gt;::value, typename std\l::iterator_traits\&lt; ImmutableMap ::TreeTy::iterator\l \&gt;::pointer, const ImmutableMap ::value_type * \&gt;::\ltype, typename std::conditional\&lt; std::is_same\&lt; const\l ImmutableMap ::value_type, typename std::iterator_traits\l\&lt; ImmutableMap ::TreeTy::iterator \&gt;::value_type \&gt;::value,\l typename std::iterator_traits\&lt; ImmutableMap ::TreeTy::iterator\l \&gt;::reference, const ImmutableMap ::value_type &amp; \&gt;::type \&gt;" alt="" coords="1172,169,1560,459"/>
<area shape="rect" id="node6" href="$classllvm_1_1iterator__facade__base.html" title="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..." alt="" coords="363,451,587,521"/>
<area shape="rect" id="node8" href="$classllvm_1_1iterator__adaptor__base.html" title="CRTP base class for adapting an iterator to a different type. " alt="" coords="1239,484,1493,555"/>
<area shape="rect" id="node11" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; ImutAVLValueIterator\l\&lt; T \&gt;, std::iterator_traits\l\&lt; T::TreeTy::iterator \&gt;::iterator\l_category, const T::value_type,\l typename std::iterator_traits\&lt;\l T::TreeTy::iterator \&gt;::difference\l_type, typename std::conditional\&lt; std\l::is_same\&lt; const T::value_type, typename\l std::iterator_traits\&lt; T::TreeTy::iterator\l \&gt;::value_type \&gt;::value, typename std::iterator\l_traits\&lt; T::TreeTy::iterator \&gt;::pointer, const\l T::value_type * \&gt;::type, typename std::conditional\l\&lt; std::is_same\&lt; const T::value_type, typename std\l::iterator_traits\&lt; T::TreeTy::iterator \&gt;::value_type\l \&gt;::value, typename std::iterator_traits\&lt; T::TreeTy::\literator \&gt;::reference, const T::value_type &amp; \&gt;::type \&gt;" alt="" coords="1201,610,1531,871"/>
<area shape="rect" id="node10" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; ImutAVLValueIterator\l\&lt; T \&gt;, T::TreeTy::iterator,\l std::iterator_traits\&lt; T::TreeTy\l::iterator \&gt;::iterator_category,\l const T::value_type \&gt;" alt="" coords="1849,569,2047,669"/>
<area shape="rect" id="node9" href="$structllvm_1_1ImutAVLValueIterator.html" title="Generic iterator that wraps a T::TreeTy::iterator and exposes iterator::getValue() on dereference..." alt="" coords="2132,546,2343,573"/>
</map>
