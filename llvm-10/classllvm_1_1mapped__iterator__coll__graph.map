<map id="llvm::mapped_iterator&lt; ItTy, FuncTy, FuncReturnTy &gt;" name="llvm::mapped_iterator&lt; ItTy, FuncTy, FuncReturnTy &gt;">
<area shape="rect" id="node2" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; mapped_iterator\l\&lt; ItTy, FuncTy \&gt;, ItTy,\l std::iterator_traits\&lt; ItTy\l \&gt;::iterator_category, std\l::remove_reference\&lt; FuncReturnTy\l \&gt;::type \&gt;" alt="" coords="1605,468,1835,583"/>
<area shape="rect" id="node3" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; mapped_iterator\l\&lt; ItTy, FuncTy \&gt;, std::\literator_traits\&lt; ItTy \&gt;\l::iterator_category, std\l::remove_reference\&lt; FuncReturnTy\l \&gt;::type, typename std::iterator\l_traits\&lt; ItTy \&gt;::difference_type,\l typename std::conditional\&lt; std::\lis_same\&lt; std::remove_reference\&lt; FuncReturnTy\l \&gt;::type, typename std::iterator_traits\l\&lt; ItTy \&gt;::value_type \&gt;::value, typename std\l::iterator_traits\&lt; ItTy \&gt;::pointer, std::remove\l_reference\&lt; FuncReturnTy \&gt;::type * \&gt;::type, typename\l std::conditional\&lt; std::is_same\&lt; std::remove_reference\l\&lt; FuncReturnTy \&gt;::type, typename std::iterator_traits\l\&lt; ItTy \&gt;::value_type \&gt;::value, typename std::iterator\l_traits\&lt; ItTy \&gt;::reference, std::remove_reference\&lt; FuncReturnTy\l \&gt;::type &amp; \&gt;::type \&gt;" alt="" coords="943,175,1343,465"/>
<area shape="rect" id="node5" href="$classllvm_1_1iterator__facade__base.html" title="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..." alt="" coords="325,431,549,502"/>
<area shape="rect" id="node8" href="$classllvm_1_1iterator__adaptor__base.html" title="CRTP base class for adapting an iterator to a different type. " alt="" coords="1016,490,1269,561"/>
<area shape="rect" id="node7" href="$classItTy.html" title="ItTy" alt="" coords="1120,585,1165,612"/>
</map>
