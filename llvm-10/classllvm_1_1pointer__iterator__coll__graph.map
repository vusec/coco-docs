<map id="llvm::pointer_iterator&lt; WrappedIteratorT, T &gt;" name="llvm::pointer_iterator&lt; WrappedIteratorT, T &gt;">
<area shape="rect" id="node2" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; pointer_iterator\l\&lt; WrappedIteratorT, T \&gt;,\l WrappedIteratorT, std::iterator\l_traits\&lt; WrappedIteratorT \&gt;::iterator\l_category, T \&gt;" alt="" coords="1561,337,1792,437"/>
<area shape="rect" id="node3" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; pointer_iterator\l\&lt; WrappedIteratorT, T \&gt;\l, std::iterator_traits\&lt;\l WrappedIteratorT \&gt;::iterator\l_category, T, typename std::\literator_traits\&lt; WrappedIteratorT\l \&gt;::difference_type, typename std\l::conditional\&lt; std::is_same\&lt; T, typename\l std::iterator_traits\&lt; WrappedIteratorT\l \&gt;::value_type \&gt;::value, typename std::iterator\l_traits\&lt; WrappedIteratorT \&gt;::pointer, T * \&gt;::\ltype, typename std::conditional\&lt; std::is_same\l\&lt; T, typename std::iterator_traits\&lt; WrappedIteratorT\l \&gt;::value_type \&gt;::value, typename std::iterator_traits\l\&lt; WrappedIteratorT \&gt;::reference, T &amp; \&gt;::type \&gt;" alt="" coords="1021,81,1348,328"/>
<area shape="rect" id="node5" href="$classllvm_1_1iterator__facade__base.html" title="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..." alt="" coords="318,328,542,399"/>
<area shape="rect" id="node8" href="$classllvm_1_1iterator__adaptor__base.html" title="CRTP base class for adapting an iterator to a different type. " alt="" coords="1058,352,1311,423"/>
</map>
