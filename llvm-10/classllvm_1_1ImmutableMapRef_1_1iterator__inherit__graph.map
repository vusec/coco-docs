<map id="llvm::ImmutableMapRef&lt; KeyT, ValT, ValInfo &gt;::iterator" name="llvm::ImmutableMapRef&lt; KeyT, ValT, ValInfo &gt;::iterator">
<area shape="rect" id="node2" href="$structllvm_1_1ImutAVLValueIterator.html" title="llvm::ImutAVLValueIterator\l\&lt; ImmutableMapRef \&gt;" alt="" coords="2685,495,2864,537"/>
<area shape="rect" id="node3" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; ImutAVLValueIterator\l\&lt; ImmutableMapRef \&gt;, ImmutableMapRef\l ::TreeTy::iterator, std::iterator\l_traits\&lt; ImmutableMapRef ::TreeTy\l::iterator \&gt;::iterator_category, const\l ImmutableMapRef ::value_type \&gt;" alt="" coords="1973,423,2241,537"/>
<area shape="rect" id="node4" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; ImutAVLValueIterator\l\&lt; ImmutableMapRef \&gt;, std\l::iterator_traits\&lt; ImmutableMapRef\l ::TreeTy::iterator \&gt;::iterator\l_category, const ImmutableMapRef\l ::value_type, typename std::iterator\l_traits\&lt; ImmutableMapRef ::TreeTy::iterator\l \&gt;::difference_type, typename std::conditional\l\&lt; std::is_same\&lt; const ImmutableMapRef ::value\l_type, typename std::iterator_traits\&lt; ImmutableMapRef\l ::TreeTy::iterator \&gt;::value_type \&gt;::value, typename\l std::iterator_traits\&lt; ImmutableMapRef ::TreeTy::iterator\l \&gt;::pointer, const ImmutableMapRef ::value_type * \&gt;::type,\l typename std::conditional\&lt; std::is_same\&lt; const ImmutableMapRef\l ::value_type, typename std::iterator_traits\&lt; ImmutableMapRef\l ::TreeTy::iterator \&gt;::value_type \&gt;::value, typename std::iterator\l_traits\&lt; ImmutableMapRef ::TreeTy::iterator \&gt;::reference, const ImmutableMapRef\l ::value_type &amp; \&gt;::type \&gt;" alt="" coords="1188,161,1691,452"/>
<area shape="rect" id="node6" href="$classllvm_1_1iterator__facade__base.html" title="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..." alt="" coords="351,443,575,514"/>
<area shape="rect" id="node8" href="$classllvm_1_1iterator__adaptor__base.html" title="CRTP base class for adapting an iterator to a different type. " alt="" coords="1313,477,1566,547"/>
<area shape="rect" id="node11" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; ImutAVLValueIterator\l\&lt; T \&gt;, std::iterator_traits\l\&lt; T::TreeTy::iterator \&gt;::iterator\l_category, const T::value_type,\l typename std::iterator_traits\&lt;\l T::TreeTy::iterator \&gt;::difference\l_type, typename std::conditional\&lt; std\l::is_same\&lt; const T::value_type, typename\l std::iterator_traits\&lt; T::TreeTy::iterator\l \&gt;::value_type \&gt;::value, typename std::iterator\l_traits\&lt; T::TreeTy::iterator \&gt;::pointer, const\l T::value_type * \&gt;::type, typename std::conditional\l\&lt; std::is_same\&lt; const T::value_type, typename std\l::iterator_traits\&lt; T::TreeTy::iterator \&gt;::value_type\l \&gt;::value, typename std::iterator_traits\&lt; T::TreeTy::\literator \&gt;::reference, const T::value_type &amp; \&gt;::type \&gt;" alt="" coords="1275,603,1604,864"/>
<area shape="rect" id="node10" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; ImutAVLValueIterator\l\&lt; T \&gt;, T::TreeTy::iterator,\l std::iterator_traits\&lt; T::TreeTy\l::iterator \&gt;::iterator_category,\l const T::value_type \&gt;" alt="" coords="2009,562,2206,662"/>
<area shape="rect" id="node9" href="$structllvm_1_1ImutAVLValueIterator.html" title="Generic iterator that wraps a T::TreeTy::iterator and exposes iterator::getValue() on dereference..." alt="" coords="2291,539,2501,565"/>
</map>
