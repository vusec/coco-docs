<map id="llvm::LazyCallGraph::EdgeSequence::iterator" name="llvm::LazyCallGraph::EdgeSequence::iterator">
<area shape="rect" id="node2" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; iterator, VectorImplT\l::iterator, std::forward_iterator_tag \&gt;" alt="" coords="1661,355,1892,411"/>
<area shape="rect" id="node3" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; iterator, std\l::forward_iterator_tag,\l typename std::iterator\l_traits\&lt; VectorImplT::iterator\l \&gt;::value_type, typename std\l::iterator_traits\&lt; VectorImplT\l::iterator \&gt;::difference_type,\l typename std::conditional\&lt; std\l::is_same\&lt; typename std::iterator\l_traits\&lt; VectorImplT::iterator \&gt;::\lvalue_type, typename std::iterator\l_traits\&lt; VectorImplT::iterator \&gt;::value\l_type \&gt;::value, typename std::iterator\l_traits\&lt; VectorImplT::iterator \&gt;::pointer,\l typename std::iterator_traits\&lt; VectorImplT\l::iterator \&gt;::value_type * \&gt;::type, typename\l std::conditional\&lt; std::is_same\&lt; typename std\l::iterator_traits\&lt; VectorImplT::iterator \&gt;::value\l_type, typename std::iterator_traits\&lt; VectorImplT\l::iterator \&gt;::value_type \&gt;::value, typename std::iterator\l_traits\&lt; VectorImplT::iterator \&gt;::reference, typename std\l::iterator_traits\&lt; VectorImplT::iterator \&gt;::value_type &amp; \&gt;::type \&gt;" alt="" coords="1087,91,1477,441"/>
<area shape="rect" id="node5" href="$classllvm_1_1iterator__facade__base.html" title="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..." alt="" coords="348,443,572,513"/>
<area shape="rect" id="node7" href="$classllvm_1_1iterator__adaptor__base.html" title="CRTP base class for adapting an iterator to a different type. " alt="" coords="1155,465,1409,536"/>
</map>
