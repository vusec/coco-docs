<map id="llvm::ilist_node_with_parent&lt; NodeTy, ParentTy, Options &gt;" name="llvm::ilist_node_with_parent&lt; NodeTy, ParentTy, Options &gt;">
<area shape="rect" id="node10" href="$classllvm_1_1ilist__node__with__parent.html" title="llvm::ilist_node_with\l_parent\&lt; MachineBasicBlock,\l MachineFunction \&gt;" alt="" coords="1868,365,2064,421"/>
<area shape="rect" id="node12" href="$classllvm_1_1ilist__node__with__parent.html" title="llvm::ilist_node_with\l_parent\&lt; VPRecipeBase,\l VPBasicBlock \&gt;" alt="" coords="1881,535,2051,591"/>
<area shape="rect" id="node25" href="$classllvm_1_1ilist__node__with__parent.html" title="llvm::ilist_node_with\l_parent\&lt; MachineInstr,\l MachineBasicBlock, ilist\l_sentinel_tracking\&lt; true \&gt; \&gt;" alt="" coords="1873,794,2059,865"/>
<area shape="rect" id="node27" href="$classllvm_1_1ilist__node__with__parent.html" title="llvm::ilist_node_with\l_parent\&lt; Instruction,\l BasicBlock \&gt;" alt="" coords="1895,889,2037,945"/>
<area shape="rect" id="node46" href="$classllvm_1_1ilist__node__with__parent.html" title="llvm::ilist_node_with\l_parent\&lt; MCFragment,\l MCSection \&gt;" alt="" coords="1887,969,2045,1025"/>
<area shape="rect" id="node48" href="$classllvm_1_1ilist__node__with__parent.html" title="llvm::ilist_node_with\l_parent\&lt; BasicBlock,\l Function \&gt;" alt="" coords="1893,1049,2039,1105"/>
<area shape="rect" id="node2" href="$classllvm_1_1ilist__node.html" title="llvm::ilist_node\&lt; NodeTy,\l Options... \&gt;" alt="" coords="1203,863,1373,905"/>
<area shape="rect" id="node3" href="$classllvm_1_1ilist__node__impl.html" title="llvm::ilist_node_impl\l\&lt; ilist_detail::compute\l_node_options\&lt; NodeTy,\l Options... \&gt;::type \&gt;" alt="" coords="653,814,821,885"/>
<area shape="rect" id="node5" href="$classllvm_1_1ilist__node__impl.html" title="Implementation for an ilist node. " alt="" coords="259,869,399,910"/>
<area shape="rect" id="node8" href="$classllvm_1_1ilist__node__impl.html" title="llvm::ilist_node_impl\l\&lt; ilist_detail::compute\l_node_options\&lt; T, Options...\l \&gt;::type \&gt;" alt="" coords="641,909,832,979"/>
<area shape="rect" id="node7" href="$classllvm_1_1ilist__node.html" title="llvm::ilist_node\&lt; T,\l Options \&gt;" alt="" coords="881,897,1015,938"/>
<area shape="rect" id="node11" href="$classllvm_1_1MachineBasicBlock.html" title="llvm::MachineBasicBlock" alt="" coords="2113,289,2283,316"/>
<area shape="rect" id="node13" href="$classllvm_1_1VPRecipeBase.html" title="VPRecipeBase is a base class modeling a sequence of one or more output IR instructions. " alt="" coords="2127,340,2269,367"/>
<area shape="rect" id="node14" href="$classllvm_1_1VPBlendRecipe.html" title="A recipe for vectorizing a phi&#45;node as a sequence of mask&#45;based select instructions. " alt="" coords="2367,340,2514,367"/>
<area shape="rect" id="node15" href="$classllvm_1_1VPBranchOnMaskRecipe.html" title="A recipe for generating conditional branches on the bits of a mask. " alt="" coords="2339,391,2542,417"/>
<area shape="rect" id="node16" href="$classllvm_1_1VPInstruction.html" title="This is a concrete Recipe that models a single VPlan&#45;level instruction. " alt="" coords="2374,441,2507,468"/>
<area shape="rect" id="node17" href="$classllvm_1_1VPInterleaveRecipe.html" title="VPInterleaveRecipe is a recipe for transforming an interleave group of load or stores into one wide l..." alt="" coords="2355,492,2526,519"/>
<area shape="rect" id="node18" href="$classllvm_1_1VPPredInstPHIRecipe.html" title="VPPredInstPHIRecipe is a recipe for generating the phi nodes needed when control converges back from ..." alt="" coords="2348,543,2533,569"/>
<area shape="rect" id="node19" href="$classllvm_1_1VPReplicateRecipe.html" title="VPReplicateRecipe replicates a given instruction producing multiple scalar copies of the original sca..." alt="" coords="2357,5,2525,32"/>
<area shape="rect" id="node20" href="$classllvm_1_1VPWidenGEPRecipe.html" title="A recipe for handling GEP instructions. " alt="" coords="2351,56,2530,83"/>
<area shape="rect" id="node21" href="$classllvm_1_1VPWidenIntOrFpInductionRecipe.html" title="A recipe for handling phi nodes of integer and floating&#45;point inductions, producing their vector and ..." alt="" coords="2337,107,2544,149"/>
<area shape="rect" id="node22" href="$classllvm_1_1VPWidenMemoryInstructionRecipe.html" title="A Recipe for widening load/store operations. " alt="" coords="2332,173,2549,214"/>
<area shape="rect" id="node23" href="$classllvm_1_1VPWidenPHIRecipe.html" title="A recipe for handling all phi nodes except for integer and FP inductions. " alt="" coords="2354,239,2527,265"/>
<area shape="rect" id="node24" href="$classllvm_1_1VPWidenRecipe.html" title="VPWidenRecipe is a recipe for producing a copy of vector type for each Instruction in its ingredients..." alt="" coords="2365,289,2516,316"/>
<area shape="rect" id="node26" href="$classllvm_1_1MachineInstr.html" title="Representation of each machine instruction. " alt="" coords="2133,816,2263,843"/>
<area shape="rect" id="node28" href="$classllvm_1_1Instruction.html" title="llvm::Instruction" alt="" coords="2141,948,2255,975"/>
<area shape="rect" id="node29" href="$classllvm_1_1AtomicCmpXchgInst.html" title="An instruction that atomically checks whether a specified value is in a memory location, and, if it is, stores a new value there. " alt="" coords="2353,1151,2528,1177"/>
<area shape="rect" id="node30" href="$classllvm_1_1AtomicRMWInst.html" title="an instruction that atomically reads a memory location, combines it with another value, and then stores the result back. " alt="" coords="2365,1201,2516,1228"/>
<area shape="rect" id="node31" href="$classllvm_1_1BinaryOperator.html" title="llvm::BinaryOperator" alt="" coords="2370,1252,2511,1279"/>
<area shape="rect" id="node32" href="$classllvm_1_1BranchInst.html" title="Conditional or Unconditional Branch instruction. " alt="" coords="2382,1303,2499,1329"/>
<area shape="rect" id="node33" href="$classllvm_1_1CallBase.html" title="Base class for all callable instructions (InvokeInst and CallInst) Holds everything related to callin..." alt="" coords="2387,1353,2494,1380"/>
<area shape="rect" id="node34" href="$classllvm_1_1CatchReturnInst.html" title="llvm::CatchReturnInst" alt="" coords="2365,1404,2516,1431"/>
<area shape="rect" id="node35" href="$classllvm_1_1CatchSwitchInst.html" title="llvm::CatchSwitchInst" alt="" coords="2365,593,2516,620"/>
<area shape="rect" id="node36" href="$classllvm_1_1CleanupReturnInst.html" title="llvm::CleanupReturnInst" alt="" coords="2359,644,2522,671"/>
<area shape="rect" id="node37" href="$classllvm_1_1CmpInst.html" title="This class is the base class for the comparison instructions. " alt="" coords="2389,695,2493,721"/>
<area shape="rect" id="node38" href="$classllvm_1_1ExtractElementInst.html" title="This instruction extracts a single (scalar) element from a VectorType value. " alt="" coords="2357,745,2524,772"/>
<area shape="rect" id="node39" href="$classllvm_1_1FenceInst.html" title="An instruction for ordering other memory operations. " alt="" coords="2385,796,2497,823"/>
<area shape="rect" id="node40" href="$classllvm_1_1FuncletPadInst.html" title="llvm::FuncletPadInst" alt="" coords="2369,847,2512,873"/>
<area shape="rect" id="node41" href="$classllvm_1_1GetElementPtrInst.html" title="an instruction for type&#45;safe pointer arithmetic to access elements of arrays and structs ..." alt="" coords="2359,897,2522,924"/>
<area shape="rect" id="node42" href="$classllvm_1_1IndirectBrInst.html" title="Indirect Branch Instruction. " alt="" coords="2375,948,2507,975"/>
<area shape="rect" id="node43" href="$classllvm_1_1InsertElementInst.html" title="This instruction inserts a single (scalar) element into a VectorType value. " alt="" coords="2362,999,2519,1025"/>
<area shape="rect" id="node44" href="$classllvm_1_1InsertValueInst.html" title="This instruction inserts a struct field of array element value into an aggregate value. " alt="" coords="2369,1049,2512,1076"/>
<area shape="rect" id="node45" href="$classllvm_1_1LandingPadInst.html" title="The landingpad instruction holds all of the information necessary to generate correct exception handl..." alt="" coords="2369,1100,2513,1127"/>
<area shape="rect" id="node47" href="$classllvm_1_1MCFragment.html" title="llvm::MCFragment" alt="" coords="2133,999,2263,1025"/>
<area shape="rect" id="node49" href="$classllvm_1_1BasicBlock.html" title="LLVM Basic Block Representation. " alt="" coords="2138,1064,2258,1091"/>
</map>
