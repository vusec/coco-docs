<map id="llvm::ImmutableMap&lt; KeyT, ValT, ValInfo &gt;::iterator" name="llvm::ImmutableMap&lt; KeyT, ValT, ValInfo &gt;::iterator">
<area shape="rect" id="node2" href="$structllvm_1_1ImutAVLValueIterator.html" title="llvm::ImutAVLValueIterator\l\&lt; ImmutableMap \&gt;" alt="" coords="2505,532,2684,573"/>
<area shape="rect" id="node3" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; ImutAVLValueIterator\l\&lt; ImmutableMap \&gt;, ImmutableMap\l ::TreeTy::iterator, std::iterator\l_traits\&lt; ImmutableMap ::TreeTy::iterator\l \&gt;::iterator_category, const ImmutableMap\l ::value_type \&gt;" alt="" coords="1813,443,2083,558"/>
<area shape="rect" id="node4" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; ImutAVLValueIterator\l\&lt; ImmutableMap \&gt;, std::iterator\l_traits\&lt; ImmutableMap ::TreeTy\l::iterator \&gt;::iterator_category,\l const ImmutableMap ::value_type,\l typename std::iterator_traits\&lt; ImmutableMap\l ::TreeTy::iterator \&gt;::difference_type,\l typename std::conditional\&lt; std::is_same\l\&lt; const ImmutableMap ::value_type, typename\l std::iterator_traits\&lt; ImmutableMap ::TreeTy\l::iterator \&gt;::value_type \&gt;::value, typename std\l::iterator_traits\&lt; ImmutableMap ::TreeTy::iterator\l \&gt;::pointer, const ImmutableMap ::value_type * \&gt;::\ltype, typename std::conditional\&lt; std::is_same\&lt; const\l ImmutableMap ::value_type, typename std::iterator_traits\l\&lt; ImmutableMap ::TreeTy::iterator \&gt;::value_type \&gt;::value,\l typename std::iterator_traits\&lt; ImmutableMap ::TreeTy::iterator\l \&gt;::reference, const ImmutableMap ::value_type &amp; \&gt;::type \&gt;" alt="" coords="1172,261,1560,551"/>
<area shape="rect" id="node6" href="$classllvm_1_1iterator__facade__base.html" title="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..." alt="" coords="363,639,587,709"/>
<area shape="rect" id="node10" href="$classllvm_1_1iterator__adaptor__base.html" title="CRTP base class for adapting an iterator to a different type. " alt="" coords="1239,576,1493,647"/>
<area shape="rect" id="node14" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; ImutAVLValueIterator\l\&lt; T \&gt;, std::iterator_traits\l\&lt; T::TreeTy::iterator \&gt;::iterator\l_category, const T::value_type,\l typename std::iterator_traits\&lt;\l T::TreeTy::iterator \&gt;::difference\l_type, typename std::conditional\&lt; std\l::is_same\&lt; const T::value_type, typename\l std::iterator_traits\&lt; T::TreeTy::iterator\l \&gt;::value_type \&gt;::value, typename std::iterator\l_traits\&lt; T::TreeTy::iterator \&gt;::pointer, const\l T::value_type * \&gt;::type, typename std::conditional\l\&lt; std::is_same\&lt; const T::value_type, typename std\l::iterator_traits\&lt; T::TreeTy::iterator \&gt;::value_type\l \&gt;::value, typename std::iterator_traits\&lt; T::TreeTy::\literator \&gt;::reference, const T::value_type &amp; \&gt;::type \&gt;" alt="" coords="1201,798,1531,1059"/>
<area shape="rect" id="node8" href="$classllvm_1_1ImmutableMap.html" title="llvm::ImmutableMap\l\&lt; KeyT, ValT, ValInfo \&gt;" alt="" coords="1285,69,1447,111"/>
<area shape="rect" id="node9" href="$classllvm_1_1ImutAVLTree.html" title="llvm::ImutAVLTree\&lt;\l ImutInfo \&gt;" alt="" coords="406,5,545,47"/>
<area shape="rect" id="node13" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; ImutAVLValueIterator\l\&lt; T \&gt;, T::TreeTy::iterator,\l std::iterator_traits\&lt; T::TreeTy\l::iterator \&gt;::iterator_category,\l const T::value_type \&gt;" alt="" coords="1849,599,2047,699"/>
<area shape="rect" id="node12" href="$structllvm_1_1ImutAVLValueIterator.html" title="Generic iterator that wraps a T::TreeTy::iterator and exposes iterator::getValue() on dereference..." alt="" coords="2132,575,2343,602"/>
<area shape="rect" id="node16" href="$classT_1_1TreeTy_1_1iterator.html" title="iterator" alt="" coords="1335,671,1397,698"/>
</map>
