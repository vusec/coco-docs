<map id="llvm::ImutAVLValueIterator&lt; T &gt;" name="llvm::ImutAVLValueIterator&lt; T &gt;">
<area shape="rect" id="node2" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; ImutAVLValueIterator\l\&lt; T \&gt;, T::TreeTy::iterator,\l std::iterator_traits\&lt; T::TreeTy\l::iterator \&gt;::iterator_category,\l const T::value_type \&gt;" alt="" coords="1497,417,1695,517"/>
<area shape="rect" id="node3" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; ImutAVLValueIterator\l\&lt; T \&gt;, std::iterator_traits\l\&lt; T::TreeTy::iterator \&gt;::iterator\l_category, const T::value_type,\l typename std::iterator_traits\&lt;\l T::TreeTy::iterator \&gt;::difference\l_type, typename std::conditional\&lt; std\l::is_same\&lt; const T::value_type, typename\l std::iterator_traits\&lt; T::TreeTy::iterator\l \&gt;::value_type \&gt;::value, typename std::iterator\l_traits\&lt; T::TreeTy::iterator \&gt;::pointer, const\l T::value_type * \&gt;::type, typename std::conditional\l\&lt; std::is_same\&lt; const T::value_type, typename std\l::iterator_traits\&lt; T::TreeTy::iterator \&gt;::value_type\l \&gt;::value, typename std::iterator_traits\&lt; T::TreeTy::\literator \&gt;::reference, const T::value_type &amp; \&gt;::type \&gt;" alt="" coords="927,145,1256,407"/>
<area shape="rect" id="node5" href="$classllvm_1_1iterator__facade__base.html" title="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..." alt="" coords="307,373,531,443"/>
<area shape="rect" id="node8" href="$classllvm_1_1iterator__adaptor__base.html" title="CRTP base class for adapting an iterator to a different type. " alt="" coords="965,431,1218,502"/>
<area shape="rect" id="node7" href="$classT_1_1TreeTy_1_1iterator.html" title="iterator" alt="" coords="1060,527,1123,553"/>
</map>
