<map id="llvm::LazyCallGraph::EdgeSequence::call_iterator" name="llvm::LazyCallGraph::EdgeSequence::call_iterator">
<area shape="rect" id="node2" href="$classllvm_1_1iterator__adaptor__base.html" title="llvm::iterator_adaptor\l_base\&lt; call_iterator,\l VectorImplT::iterator,\l std::forward_iterator_tag \&gt;" alt="" coords="1684,421,1863,492"/>
<area shape="rect" id="node3" href="$classllvm_1_1iterator__facade__base.html" title="llvm::iterator_facade\l_base\&lt; call_iterator,\l std::forward_iterator\l_tag, typename std::iterator\l_traits\&lt; VectorImplT::iterator\l \&gt;::value_type, typename std::\literator_traits\&lt; VectorImplT::iterator\l \&gt;::difference_type, typename std::conditional\l\&lt; std::is_same\&lt; typename std::iterator_traits\l\&lt; VectorImplT::iterator \&gt;::value_type, typename\l std::iterator_traits\&lt; VectorImplT::iterator \&gt;\l::value_type \&gt;::value, typename std::iterator_traits\l\&lt; VectorImplT::iterator \&gt;::pointer, typename std::iterator\l_traits\&lt; VectorImplT::iterator \&gt;::value_type * \&gt;::type,\l typename std::conditional\&lt; std::is_same\&lt; typename std::iterator\l_traits\&lt; VectorImplT::iterator \&gt;::value_type, typename std::iterator\l_traits\&lt; VectorImplT::iterator \&gt;::value_type \&gt;::value, typename std\l::iterator_traits\&lt; VectorImplT::iterator \&gt;::reference, typename std\l::iterator_traits\&lt; VectorImplT::iterator \&gt;::value_type &amp; \&gt;::type \&gt;" alt="" coords="1071,209,1481,499"/>
<area shape="rect" id="node5" href="$classllvm_1_1iterator__facade__base.html" title="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..." alt="" coords="348,501,572,572"/>
<area shape="rect" id="node7" href="$classllvm_1_1iterator__adaptor__base.html" title="CRTP base class for adapting an iterator to a different type. " alt="" coords="1149,524,1403,595"/>
</map>
